#!/usr/bin/env ruby

require 'chef-vault-pki'
require 'base64'
require 'optparse'
require 'json'

version = '0.4.2'
options = {
  :name => nil,
  :key_size => 2048,
  :expires => 365,
  :output => 'json'
}


OptionParser.new do |opts|
  opts.banner = "Usage chef-vault-pki [command] --name NAME [options]"
  opts.separator ""
  opts.separator "Commands:"
  opts.separator "    ca - Creates a CA (default)"
  opts.separator "    client - Creates a client (CA must be provided on STDIN as JSON)"
  opts.separator ""
  opts.separator "Common options:"

  opts.on("-n", "--name NAME", "NAME for SSL certificate. REQUIRED") do |n|
    options[:name] = n
  end

  opts.on("-k", "--key_size KEY_SIZE", "Use KEY_SIZE bits for the key. Defaults to #{options[:key_size]}") do |n|
    options[:name] = n
  end

  opts.on("-e", "--expires DAYS", "Certificate expires in DAYS days. Defaults to #{options[:expire]}") do |e|
    options[:expire] = e
  end

  opts.on("-o", "--output FORMAT", "Output format (json,text). Defaults to #{options[:output]}") do |o|
    options[:output] = o
  end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on("-v", "--version", "Show version") do
    puts "Version #{version}"
    exit
  end

end.parse!

if options[:name].nil?
  puts "NAME option is required"
  exit(1)
end

command = ARGV.shift || 'ca'

case command.downcase
when 'ca'
  pki = ChefVaultPKI::CA.new options
  pki.generate!
when 'client'
  ca_pems = JSON.parse(STDIN.read)
  ca = ChefVaultPKI::CA.new
  ca.load! ca_pems

  pki = ChefVaultPKI::Client.new options
  pki.generate! ca
end

case options[:output].downcase
when 'json'
  puts ({ :cert => pki.cert.to_pem, :key => pki.key.to_pem }.to_json)
else
  if command.downcase == 'client'
    print "\n# CA certificate\n\n"
    puts ca.cert.to_pem
  end
  print "\n# Client certificate\n\n"
  puts pki.cert.to_pem
  print "\n# Client private key\n\n"
  puts pki.key.to_pem
end

